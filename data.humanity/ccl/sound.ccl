;;       _________ __                 __                               
;;      /   _____//  |_____________ _/  |______     ____  __ __  ______
;;      \_____  \\   __\_  __ \__  \\   __\__  \   / ___\|  |  \/  ___/
;;      /        \|  |  |  | \// __ \|  |  / __ \_/ /_/  >  |  /\___ \ 
;;     /_______  /|__|  |__|  (____  /__| (____  /\___  /|____//____  >
;;             \/                  \/          \//_____/            \/ 
;;  ______________________                           ______________________
;;			  T H E   W A R   B E G I N S
;;	   Stratagus - A free fantasy real time strategy game engine
;;
;;	sound.ccl	-	Define the used sounds.
;;
;;	(c) Copyright 1999-2003 by Fabrice Rossi and Lutz Sammer
;;
;;      This program is free software; you can redistribute it and/or modify
;;      it under the terms of the GNU General Public License as published by
;;      the Free Software Foundation; either version 2 of the License, or
;;      (at your option) any later version.
;;  
;;      This program is distributed in the hope that it will be useful,
;;      but WITHOUT ANY WARRANTY; without even the implied warranty of
;;      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;      GNU General Public License for more details.
;;  
;;      You should have received a copy of the GNU General Public License
;;      along with this program; if not, write to the Free Software
;;      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;
;;	$Id$

;;	Uncomment this to enable threaded sound
;(sound-thread)


;;----------------------------------------------------------------------------
;;	Music part

;;----------------------------------------------------------------------------
;;	(music-stopped) is called if the current music is finished.
;;
;;		This is a random music player demo
;;

(define (music-stopped)
  (if (not (= (length play-list) 0)) 
    (play-music (nth (rand (length play-list)) play-list))))


;;----------------------------------------------------------------------------
;;	(set-cd-mode!) set how your CD is played.
;;		all	plays all tracks
;;		random	plays random tracks
;;		defined	play according to playlist below
;;		off	turns cd player off

(set-cd-mode! 'all)
;(set-cd-mode! 'random) 
;(set-cd-mode! 'defined)
;(set-cd-mode! 'off)


;;----------------------------------------------------------------------------
;;	Define sounds later used
;;

(define sound-click (make-sound "click" "ui/click.wav"))



;;----------------------------------------------------------------------------
;;	ELITES
;;

;; UNITS
(make-sound "engineer-selected" "elites/units/engineer_select.wav")
(make-sound "engineer-acknowledge" "elites/units/engineer_action.wav")
(make-sound "engineer-ready" "elites/computer_voice/engineer.ready.wav")
(make-sound "engineer-help" "elites/computer_voice/engineer.underattack.wav")
(make-sound "engineer-die" "elites/units/engineer_die.wav")
(make-sound "engineer-repair" "elites/units/engineer_attack.wav")
(make-sound "engineer-harvest" "elites/units/engineer_attack.wav")

(make-sound "dev-selected" "elites/buildings/sfx_fort.select.wav")
(make-sound "dev-ready" "elites/computer_voice/elite.fort.completed.wav")
(make-sound "dev-help" "elites/computer_voice/elite.fort.underattack.wav")
(make-sound "dev-dead" "elites/buildings/sfx_fort.die.wav")




;;----------------------------------------------------------------------------
;;	TERRAS
;;

;; UNITS

;; BUILDINGS





;;----------------------------------------------------------------------------
;;	Define sounds used by game
;;

(define-game-sounds

  'placement-error sound-click
  'placement-success sound-click
  'click sound-click

; FIXME: Not ready
;  'transport-docking
;  'building-construction

;  'work-complete (list 'elites (make-sound "basic elites voices work complete" "elites/basic_voices/work_complete.wav"))
;  'work-complete (list 'terras (make-sound "basic terras voices work complete" "terras/basic_voices/work_complete.wav"))

;  'rescue (list 'elites (make-sound "elites rescue" "elites/rescue.wav"))
;  'rescue (list 'terras (make-sound "terras rescue" "terras/rescue.wav"))
)

(define sound-click (make-sound "statsthump" "ui/click.wav"))
